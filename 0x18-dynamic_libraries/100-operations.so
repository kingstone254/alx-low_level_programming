!<arch>
0-isupper.c/    0           0     0     644     262       `
#include "main.h"
#include <stdio.h>
/**
* _isupper - Check if character is upper case or lower
* @c: Character in ASCII
* Return: value 0 if false and 1 if true
*/
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     371       `
#include "main.h"
/**
 * _memset - fills n bytes of the memory pointed by s with the byte b
 * @s: Pointer to array location
 * @b: Constant byte to replace sotred date
 * @n: number of bytes to be replaced
 * Return: Pointer to memory s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(s + i) = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     338       `
#include "main.h"

/**
 * _strcat -> this is a fuction strcat
 * @dest: first parameter
 * @src: second parameter
 * Return: a string
 */
char *_strcat(char *dest, char *src)
{
	int len = 0, i;

	while (dest[len])
	{
		len++;
	}

	for (i = 0; src[i] != 0; i++)
	{
		dest[len] = src[i];
		len += 1;
	}
	dest[len] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     546       `
#include "main.h"
/**
 * _atoi - converts a string to an integer.
 * @s: input string.
 * Return: integer.
 */
int _atoi(char *s)
{
	unsigned int len = 0, size = 0, oi = 0, sign = 1, m = 1, i;

	while (*(s + len))
	{
		if (size > 0 && (*(s + len) < '0' || *(s + len) > '9'))
			break;

		if (*(s + len) == '-')
			sign *= -1;

		if ((*(s + len) >= '0') && (*(s + len) <= '9'))
		{
			if (size > 0)
				m *= 10;
			size++;
		}
		len++;
	}

	for (i = len - size; i < len; i++)
	{
		oi += ((*(s + i) - 48) * m);
		m /= 10;
	}
	return (oi * sign);
}
1-isdigit.c/    0           0     0     644     216       `
#include "main.h"
/**
* _isdigit - Check if a digit 0-9
* @c: number in ASCII
* Return: value 1 if a digit, else 0
*/

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     370       `
#include "main.h"
/**
 * _memcpy -  Copies n bytes from src to dest
 * @dest: Pointer to destination location
 * @src: Pointer to source location
 * @n: number of bytes to be copied
 * Return: Pointer to memory dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(dest + i) = *(src + i);
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     281       `
#include "main.h"
#include <string.h>

/**
 * _strncat -> function to append some characters
 * @dest: first parameter
 * @src: second parameter
 * @n: third parameter
 * Return: a string
 */
char *_strncat(char *dest, char *src, int n)
{
	strncat(dest, src, n);
	return (dest);
}

2-strchr.c/     0           0     0     644     272       `
#include "main.h"

/**
 * _strchr - prints found c
 * @s: pointer to char
 * @c: char params to found
 * Return: *S
*/

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		s++;
	}
	if (*s == c)
	{
		return (s);
	}
return (0);
}
2-strlen.c/     0           0     0     644     214       `
#include "main.h"
/**
 * _strlen - Use pointer to change value in memory
 * @s: pointer to int s location
 * Return: Null/void
 */
int _strlen(char *s)
{
	int i = 0;

	while (*s)
	{
		i++;
		s++;
	}
	return (i);
}
2-strncpy.c/    0           0     0     644     268       `
#include "main.h"
#include "string.h"

/**
 * _strncpy -> a funcion to append some characters
 * @dest: first param
 * @src: second param
 * @n: 3rd param
 * Return: a string
 */
char *_strncpy(char *dest, char *src, int n)
{
	strncpy(dest, src, n);
	return (dest);
}
3-islower.c/    0           0     0     644     253       `
#include "main.h"
/**
*_islower - Begin Here
*@c: Character ASCII code
*return 1 if lower case and 0 otherwise
*Return: Value 0 (true)
*/
int _islower(int c)

{
	if (c <= 'z' && c >= 'a')
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

3-puts.c/       0           0     0     644     191       `
#include "main.h"
/**
 * _puts - prints a string
 *
 * @str: string to be printed
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i]; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     227       `
#include "main.h"
#include <string.h>

/**
 * _strcmp -> for comparing purpose
 * @s1: param1
 * @s2: param2
 * Return: interger
 */
int _strcmp(char *s1, char *s2)
{
	int result;

	result = strcmp(s1, s2);
	return (result);
}

3-strspn.c/     0           0     0     644     420       `
/**
* _strspn - Gets the length of a prefix substring.
* @s: String where substring will look.
* @accept: Substring of accepted chars.
* Return: Length of occurrence.
*/
unsigned int _strspn(char *s, char *accept)
{
	unsigned int c = 0;
	char *t = accept;

	while (*s++)
	{
		while (*accept++)
			if (*(s - 1) == *(accept - 1))
			{
				c++;
				break;
			}
		if (!(*--accept))
			break;
		accept = t;
	}
	return (c);
}
4-isalpha.c/    0           0     0     644     290       `
#include "main.h"

/**
*_isalpha - Begin Here
*@c: Character ASCII code
*return 1 if lower or upper case and 0 otherwise
*Return: Value 0 (true)
*/
int _isalpha(int c)
{
	if ((c <= 'Z' && c >= 'A') || (c >= 'a' && c <= 'z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}
4-strpbrk.c/    0           0     0     644     426       `
#include "main.h"
/**
 * _strpbrk - function that gets the length of a prefix substring
 * @s: Pointer to string location
 * @accept: bytes to filter
 * Return: Pointer to memory s or Null if no match
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i = 0;
	unsigned int j;

	while (s[i])
	{
	j = 0;
		while (accept[j])
		{
			if (s[i] == accept[j])
			{
				return (s + i);
			}
			j++;
		}
		i++;
	}
	return (0);
}
5-strstr.c/     0           0     0     644     490       `
#include "main.h"
/**
 * _strstr - function that loocates substring
 * @haystack: Pointer to string location
 * @needle: substring to filter
 * Return: Pointer to memory haystack or Null if no hit
 */
char *_strstr(char *haystack, char *needle)
{
	char *h = haystack;
	char *n = needle;

	while (*h)
	{
		n = needle;
		h = haystack;
		while (*n)
		{
			if (*h == *n)
			{
				n++;
				h++;
			}
			else
				break;
		}
		if (*n == '\0')
			return (haystack);
		haystack++;
	}
	return (0);
}
6-abs.c/        0           0     0     644     236       `
#include "main.h"

/**
*_abs - Begin Here
*@n: integer value
*Computes absolute value and returns the value
*Return: Value absolute value of n
*/
int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	else
	{
		n *= -1;
		return (n);
	}
}
9-strcpy.c/     0           0     0     644     331       `
#include "main.h"
/**
 *_strcpy - update value.
 *@dest: Array to be evaluate.
 *@src: String to be evaluate.
 *Return: null
 */
char *_strcpy(char *dest, char *src)
{
	int len = 0;
	int i = 0;

	while (*(src + len))
	{
		len++;
	}
	for ( ; i < len ; i++)
	{
		*(dest + i) = *(src + i);
	}
	*(dest + len) = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

